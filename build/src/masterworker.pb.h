// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: masterworker.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_masterworker_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_masterworker_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_masterworker_2eproto;
namespace masterworker {
class FileInfo;
class FileInfoDefaultTypeInternal;
extern FileInfoDefaultTypeInternal _FileInfo_default_instance_;
class MapReduceInfo;
class MapReduceInfoDefaultTypeInternal;
extern MapReduceInfoDefaultTypeInternal _MapReduceInfo_default_instance_;
class MapReduceReply;
class MapReduceReplyDefaultTypeInternal;
extern MapReduceReplyDefaultTypeInternal _MapReduceReply_default_instance_;
}  // namespace masterworker
PROTOBUF_NAMESPACE_OPEN
template<> ::masterworker::FileInfo* Arena::CreateMaybeMessage<::masterworker::FileInfo>(Arena*);
template<> ::masterworker::MapReduceInfo* Arena::CreateMaybeMessage<::masterworker::MapReduceInfo>(Arena*);
template<> ::masterworker::MapReduceReply* Arena::CreateMaybeMessage<::masterworker::MapReduceReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace masterworker {

// ===================================================================

class MapReduceInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.MapReduceInfo) */ {
 public:
  inline MapReduceInfo() : MapReduceInfo(nullptr) {}
  virtual ~MapReduceInfo();

  MapReduceInfo(const MapReduceInfo& from);
  MapReduceInfo(MapReduceInfo&& from) noexcept
    : MapReduceInfo() {
    *this = ::std::move(from);
  }

  inline MapReduceInfo& operator=(const MapReduceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapReduceInfo& operator=(MapReduceInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapReduceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapReduceInfo* internal_default_instance() {
    return reinterpret_cast<const MapReduceInfo*>(
               &_MapReduceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MapReduceInfo& a, MapReduceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MapReduceInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapReduceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapReduceInfo* New() const final {
    return CreateMaybeMessage<MapReduceInfo>(nullptr);
  }

  MapReduceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapReduceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapReduceInfo& from);
  void MergeFrom(const MapReduceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapReduceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.MapReduceInfo";
  }
  protected:
  explicit MapReduceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileInfosFieldNumber = 2,
    kUserIdFieldNumber = 1,
    kBufferFileFieldNumber = 3,
    kOutputDirFieldNumber = 4,
    kIsMapWorkFieldNumber = 5,
  };
  // repeated .masterworker.FileInfo file_infos = 2;
  int file_infos_size() const;
  private:
  int _internal_file_infos_size() const;
  public:
  void clear_file_infos();
  ::masterworker::FileInfo* mutable_file_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::FileInfo >*
      mutable_file_infos();
  private:
  const ::masterworker::FileInfo& _internal_file_infos(int index) const;
  ::masterworker::FileInfo* _internal_add_file_infos();
  public:
  const ::masterworker::FileInfo& file_infos(int index) const;
  ::masterworker::FileInfo* add_file_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::FileInfo >&
      file_infos() const;

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string buffer_file = 3;
  void clear_buffer_file();
  const std::string& buffer_file() const;
  void set_buffer_file(const std::string& value);
  void set_buffer_file(std::string&& value);
  void set_buffer_file(const char* value);
  void set_buffer_file(const char* value, size_t size);
  std::string* mutable_buffer_file();
  std::string* release_buffer_file();
  void set_allocated_buffer_file(std::string* buffer_file);
  private:
  const std::string& _internal_buffer_file() const;
  void _internal_set_buffer_file(const std::string& value);
  std::string* _internal_mutable_buffer_file();
  public:

  // string output_dir = 4;
  void clear_output_dir();
  const std::string& output_dir() const;
  void set_output_dir(const std::string& value);
  void set_output_dir(std::string&& value);
  void set_output_dir(const char* value);
  void set_output_dir(const char* value, size_t size);
  std::string* mutable_output_dir();
  std::string* release_output_dir();
  void set_allocated_output_dir(std::string* output_dir);
  private:
  const std::string& _internal_output_dir() const;
  void _internal_set_output_dir(const std::string& value);
  std::string* _internal_mutable_output_dir();
  public:

  // bool is_map_work = 5;
  void clear_is_map_work();
  bool is_map_work() const;
  void set_is_map_work(bool value);
  private:
  bool _internal_is_map_work() const;
  void _internal_set_is_map_work(bool value);
  public:

  // @@protoc_insertion_point(class_scope:masterworker.MapReduceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::FileInfo > file_infos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffer_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_dir_;
  bool is_map_work_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// -------------------------------------------------------------------

class FileInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.FileInfo) */ {
 public:
  inline FileInfo() : FileInfo(nullptr) {}
  virtual ~FileInfo();

  FileInfo(const FileInfo& from);
  FileInfo(FileInfo&& from) noexcept
    : FileInfo() {
    *this = ::std::move(from);
  }

  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileInfo& operator=(FileInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileInfo* internal_default_instance() {
    return reinterpret_cast<const FileInfo*>(
               &_FileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileInfo& a, FileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FileInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileInfo* New() const final {
    return CreateMaybeMessage<FileInfo>(nullptr);
  }

  FileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileInfo& from);
  void MergeFrom(const FileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.FileInfo";
  }
  protected:
  explicit FileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kStartFieldNumber = 2,
    kEndFieldNumber = 3,
  };
  // string filename = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // int32 start = 2;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start() const;
  void _internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 end = 3;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::int32 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end() const;
  void _internal_set_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:masterworker.FileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// -------------------------------------------------------------------

class MapReduceReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.MapReduceReply) */ {
 public:
  inline MapReduceReply() : MapReduceReply(nullptr) {}
  virtual ~MapReduceReply();

  MapReduceReply(const MapReduceReply& from);
  MapReduceReply(MapReduceReply&& from) noexcept
    : MapReduceReply() {
    *this = ::std::move(from);
  }

  inline MapReduceReply& operator=(const MapReduceReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapReduceReply& operator=(MapReduceReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapReduceReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapReduceReply* internal_default_instance() {
    return reinterpret_cast<const MapReduceReply*>(
               &_MapReduceReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MapReduceReply& a, MapReduceReply& b) {
    a.Swap(&b);
  }
  inline void Swap(MapReduceReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapReduceReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapReduceReply* New() const final {
    return CreateMaybeMessage<MapReduceReply>(nullptr);
  }

  MapReduceReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapReduceReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapReduceReply& from);
  void MergeFrom(const MapReduceReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapReduceReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.MapReduceReply";
  }
  protected:
  explicit MapReduceReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kBufferFileFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string buffer_file = 2;
  void clear_buffer_file();
  const std::string& buffer_file() const;
  void set_buffer_file(const std::string& value);
  void set_buffer_file(std::string&& value);
  void set_buffer_file(const char* value);
  void set_buffer_file(const char* value, size_t size);
  std::string* mutable_buffer_file();
  std::string* release_buffer_file();
  void set_allocated_buffer_file(std::string* buffer_file);
  private:
  const std::string& _internal_buffer_file() const;
  void _internal_set_buffer_file(const std::string& value);
  std::string* _internal_mutable_buffer_file();
  public:

  // @@protoc_insertion_point(class_scope:masterworker.MapReduceReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffer_file_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MapReduceInfo

// string user_id = 1;
inline void MapReduceInfo::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MapReduceInfo::user_id() const {
  // @@protoc_insertion_point(field_get:masterworker.MapReduceInfo.user_id)
  return _internal_user_id();
}
inline void MapReduceInfo::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:masterworker.MapReduceInfo.user_id)
}
inline std::string* MapReduceInfo::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:masterworker.MapReduceInfo.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& MapReduceInfo::_internal_user_id() const {
  return user_id_.Get();
}
inline void MapReduceInfo::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MapReduceInfo::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:masterworker.MapReduceInfo.user_id)
}
inline void MapReduceInfo::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:masterworker.MapReduceInfo.user_id)
}
inline void MapReduceInfo::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:masterworker.MapReduceInfo.user_id)
}
inline std::string* MapReduceInfo::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MapReduceInfo::release_user_id() {
  // @@protoc_insertion_point(field_release:masterworker.MapReduceInfo.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MapReduceInfo::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:masterworker.MapReduceInfo.user_id)
}

// repeated .masterworker.FileInfo file_infos = 2;
inline int MapReduceInfo::_internal_file_infos_size() const {
  return file_infos_.size();
}
inline int MapReduceInfo::file_infos_size() const {
  return _internal_file_infos_size();
}
inline void MapReduceInfo::clear_file_infos() {
  file_infos_.Clear();
}
inline ::masterworker::FileInfo* MapReduceInfo::mutable_file_infos(int index) {
  // @@protoc_insertion_point(field_mutable:masterworker.MapReduceInfo.file_infos)
  return file_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::FileInfo >*
MapReduceInfo::mutable_file_infos() {
  // @@protoc_insertion_point(field_mutable_list:masterworker.MapReduceInfo.file_infos)
  return &file_infos_;
}
inline const ::masterworker::FileInfo& MapReduceInfo::_internal_file_infos(int index) const {
  return file_infos_.Get(index);
}
inline const ::masterworker::FileInfo& MapReduceInfo::file_infos(int index) const {
  // @@protoc_insertion_point(field_get:masterworker.MapReduceInfo.file_infos)
  return _internal_file_infos(index);
}
inline ::masterworker::FileInfo* MapReduceInfo::_internal_add_file_infos() {
  return file_infos_.Add();
}
inline ::masterworker::FileInfo* MapReduceInfo::add_file_infos() {
  // @@protoc_insertion_point(field_add:masterworker.MapReduceInfo.file_infos)
  return _internal_add_file_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::FileInfo >&
MapReduceInfo::file_infos() const {
  // @@protoc_insertion_point(field_list:masterworker.MapReduceInfo.file_infos)
  return file_infos_;
}

// string buffer_file = 3;
inline void MapReduceInfo::clear_buffer_file() {
  buffer_file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MapReduceInfo::buffer_file() const {
  // @@protoc_insertion_point(field_get:masterworker.MapReduceInfo.buffer_file)
  return _internal_buffer_file();
}
inline void MapReduceInfo::set_buffer_file(const std::string& value) {
  _internal_set_buffer_file(value);
  // @@protoc_insertion_point(field_set:masterworker.MapReduceInfo.buffer_file)
}
inline std::string* MapReduceInfo::mutable_buffer_file() {
  // @@protoc_insertion_point(field_mutable:masterworker.MapReduceInfo.buffer_file)
  return _internal_mutable_buffer_file();
}
inline const std::string& MapReduceInfo::_internal_buffer_file() const {
  return buffer_file_.Get();
}
inline void MapReduceInfo::_internal_set_buffer_file(const std::string& value) {
  
  buffer_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MapReduceInfo::set_buffer_file(std::string&& value) {
  
  buffer_file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:masterworker.MapReduceInfo.buffer_file)
}
inline void MapReduceInfo::set_buffer_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buffer_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:masterworker.MapReduceInfo.buffer_file)
}
inline void MapReduceInfo::set_buffer_file(const char* value,
    size_t size) {
  
  buffer_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:masterworker.MapReduceInfo.buffer_file)
}
inline std::string* MapReduceInfo::_internal_mutable_buffer_file() {
  
  return buffer_file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MapReduceInfo::release_buffer_file() {
  // @@protoc_insertion_point(field_release:masterworker.MapReduceInfo.buffer_file)
  return buffer_file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MapReduceInfo::set_allocated_buffer_file(std::string* buffer_file) {
  if (buffer_file != nullptr) {
    
  } else {
    
  }
  buffer_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buffer_file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:masterworker.MapReduceInfo.buffer_file)
}

// string output_dir = 4;
inline void MapReduceInfo::clear_output_dir() {
  output_dir_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MapReduceInfo::output_dir() const {
  // @@protoc_insertion_point(field_get:masterworker.MapReduceInfo.output_dir)
  return _internal_output_dir();
}
inline void MapReduceInfo::set_output_dir(const std::string& value) {
  _internal_set_output_dir(value);
  // @@protoc_insertion_point(field_set:masterworker.MapReduceInfo.output_dir)
}
inline std::string* MapReduceInfo::mutable_output_dir() {
  // @@protoc_insertion_point(field_mutable:masterworker.MapReduceInfo.output_dir)
  return _internal_mutable_output_dir();
}
inline const std::string& MapReduceInfo::_internal_output_dir() const {
  return output_dir_.Get();
}
inline void MapReduceInfo::_internal_set_output_dir(const std::string& value) {
  
  output_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MapReduceInfo::set_output_dir(std::string&& value) {
  
  output_dir_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:masterworker.MapReduceInfo.output_dir)
}
inline void MapReduceInfo::set_output_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  output_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:masterworker.MapReduceInfo.output_dir)
}
inline void MapReduceInfo::set_output_dir(const char* value,
    size_t size) {
  
  output_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:masterworker.MapReduceInfo.output_dir)
}
inline std::string* MapReduceInfo::_internal_mutable_output_dir() {
  
  return output_dir_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MapReduceInfo::release_output_dir() {
  // @@protoc_insertion_point(field_release:masterworker.MapReduceInfo.output_dir)
  return output_dir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MapReduceInfo::set_allocated_output_dir(std::string* output_dir) {
  if (output_dir != nullptr) {
    
  } else {
    
  }
  output_dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_dir,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:masterworker.MapReduceInfo.output_dir)
}

// bool is_map_work = 5;
inline void MapReduceInfo::clear_is_map_work() {
  is_map_work_ = false;
}
inline bool MapReduceInfo::_internal_is_map_work() const {
  return is_map_work_;
}
inline bool MapReduceInfo::is_map_work() const {
  // @@protoc_insertion_point(field_get:masterworker.MapReduceInfo.is_map_work)
  return _internal_is_map_work();
}
inline void MapReduceInfo::_internal_set_is_map_work(bool value) {
  
  is_map_work_ = value;
}
inline void MapReduceInfo::set_is_map_work(bool value) {
  _internal_set_is_map_work(value);
  // @@protoc_insertion_point(field_set:masterworker.MapReduceInfo.is_map_work)
}

// -------------------------------------------------------------------

// FileInfo

// string filename = 1;
inline void FileInfo::clear_filename() {
  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FileInfo::filename() const {
  // @@protoc_insertion_point(field_get:masterworker.FileInfo.filename)
  return _internal_filename();
}
inline void FileInfo::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:masterworker.FileInfo.filename)
}
inline std::string* FileInfo::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:masterworker.FileInfo.filename)
  return _internal_mutable_filename();
}
inline const std::string& FileInfo::_internal_filename() const {
  return filename_.Get();
}
inline void FileInfo::_internal_set_filename(const std::string& value) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FileInfo::set_filename(std::string&& value) {
  
  filename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:masterworker.FileInfo.filename)
}
inline void FileInfo::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:masterworker.FileInfo.filename)
}
inline void FileInfo::set_filename(const char* value,
    size_t size) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:masterworker.FileInfo.filename)
}
inline std::string* FileInfo::_internal_mutable_filename() {
  
  return filename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FileInfo::release_filename() {
  // @@protoc_insertion_point(field_release:masterworker.FileInfo.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileInfo::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:masterworker.FileInfo.filename)
}

// int32 start = 2;
inline void FileInfo::clear_start() {
  start_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FileInfo::_internal_start() const {
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FileInfo::start() const {
  // @@protoc_insertion_point(field_get:masterworker.FileInfo.start)
  return _internal_start();
}
inline void FileInfo::_internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_ = value;
}
inline void FileInfo::set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:masterworker.FileInfo.start)
}

// int32 end = 3;
inline void FileInfo::clear_end() {
  end_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FileInfo::_internal_end() const {
  return end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FileInfo::end() const {
  // @@protoc_insertion_point(field_get:masterworker.FileInfo.end)
  return _internal_end();
}
inline void FileInfo::_internal_set_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_ = value;
}
inline void FileInfo::set_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:masterworker.FileInfo.end)
}

// -------------------------------------------------------------------

// MapReduceReply

// string address = 1;
inline void MapReduceReply::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MapReduceReply::address() const {
  // @@protoc_insertion_point(field_get:masterworker.MapReduceReply.address)
  return _internal_address();
}
inline void MapReduceReply::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:masterworker.MapReduceReply.address)
}
inline std::string* MapReduceReply::mutable_address() {
  // @@protoc_insertion_point(field_mutable:masterworker.MapReduceReply.address)
  return _internal_mutable_address();
}
inline const std::string& MapReduceReply::_internal_address() const {
  return address_.Get();
}
inline void MapReduceReply::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MapReduceReply::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:masterworker.MapReduceReply.address)
}
inline void MapReduceReply::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:masterworker.MapReduceReply.address)
}
inline void MapReduceReply::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:masterworker.MapReduceReply.address)
}
inline std::string* MapReduceReply::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MapReduceReply::release_address() {
  // @@protoc_insertion_point(field_release:masterworker.MapReduceReply.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MapReduceReply::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:masterworker.MapReduceReply.address)
}

// string buffer_file = 2;
inline void MapReduceReply::clear_buffer_file() {
  buffer_file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MapReduceReply::buffer_file() const {
  // @@protoc_insertion_point(field_get:masterworker.MapReduceReply.buffer_file)
  return _internal_buffer_file();
}
inline void MapReduceReply::set_buffer_file(const std::string& value) {
  _internal_set_buffer_file(value);
  // @@protoc_insertion_point(field_set:masterworker.MapReduceReply.buffer_file)
}
inline std::string* MapReduceReply::mutable_buffer_file() {
  // @@protoc_insertion_point(field_mutable:masterworker.MapReduceReply.buffer_file)
  return _internal_mutable_buffer_file();
}
inline const std::string& MapReduceReply::_internal_buffer_file() const {
  return buffer_file_.Get();
}
inline void MapReduceReply::_internal_set_buffer_file(const std::string& value) {
  
  buffer_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MapReduceReply::set_buffer_file(std::string&& value) {
  
  buffer_file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:masterworker.MapReduceReply.buffer_file)
}
inline void MapReduceReply::set_buffer_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buffer_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:masterworker.MapReduceReply.buffer_file)
}
inline void MapReduceReply::set_buffer_file(const char* value,
    size_t size) {
  
  buffer_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:masterworker.MapReduceReply.buffer_file)
}
inline std::string* MapReduceReply::_internal_mutable_buffer_file() {
  
  return buffer_file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MapReduceReply::release_buffer_file() {
  // @@protoc_insertion_point(field_release:masterworker.MapReduceReply.buffer_file)
  return buffer_file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MapReduceReply::set_allocated_buffer_file(std::string* buffer_file) {
  if (buffer_file != nullptr) {
    
  } else {
    
  }
  buffer_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buffer_file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:masterworker.MapReduceReply.buffer_file)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace masterworker

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto
